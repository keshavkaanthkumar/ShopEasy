/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PaymentProcessRole;

import userinterface.CustomerRole.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.PaymentOrganization;
import Business.Organization.Organization;
import Business.Organization.VendorOrganization;
import Business.Product.CartOrder;
import Business.Product.Item;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderProcessWorkRequest;
import Business.WorkQueue.VendorProcessWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class PaymentProcessWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private PaymentOrganization paymentOrganization;
    private JPanel backGroundJpanel;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public PaymentProcessWorkAreaJPanel(JPanel backJPanel, JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.backGroundJpanel = backJPanel;
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.paymentOrganization = (PaymentOrganization) organization;

        populateTable();
    }

    public void populateTable() {
        paymentProcessTable.setRowHeight(150);
        DefaultTableModel model = (DefaultTableModel) paymentProcessTable.getModel();
        ArrayList<WorkRequest> workRequests = paymentOrganization.getWorkQueue().getWorkRequestList();
        model.setRowCount(0);
        for (int i = 0; i < workRequests.size(); i++) {
            Object[] row = new Object[9];
            WorkRequest workRequest = workRequests.get(i);
            OrderProcessWorkRequest paymentworkRequest = (OrderProcessWorkRequest) workRequest;
            row[0] = workRequest;
            row[1] = paymentworkRequest.getOrder().getTotalprice();
            row[2] = paymentworkRequest.getOrder().getFullname();
            row[3] = paymentworkRequest.getOrder().getCreditCardNo();
            row[4] = paymentworkRequest.getOrder().getCvv();
            row[5] = paymentworkRequest.getOrder().getShippingAddress();
            row[6] = paymentworkRequest.getSender().getEmployee().getName();
            row[7] = paymentworkRequest.getReceiver() == null ? null : paymentworkRequest.getReceiver().getEmployee().getName();
            row[8] = paymentworkRequest.getStatus();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        paymentProcessTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(250, 250, 250));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(250, 250, 250));
        jPanel9.setPreferredSize(new java.awt.Dimension(1680, 980));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paymentProcessTable.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        paymentProcessTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request", "Order total price", "Full Name", "Credit Card No", "CVV", "Shipping address", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentProcessTable.setEnabled(true);
        paymentProcessTable.setGridColor(new java.awt.Color(255, 255, 255));
        paymentProcessTable.setSelectionBackground(new java.awt.Color(0, 153, 0));
        jScrollPane8.setViewportView(paymentProcessTable);
        if (paymentProcessTable.getColumnModel().getColumnCount() > 0) {
            paymentProcessTable.getColumnModel().getColumn(0).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            paymentProcessTable.getColumnModel().getColumn(1).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(1).setPreferredWidth(3);
            paymentProcessTable.getColumnModel().getColumn(2).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(2).setPreferredWidth(10);
            paymentProcessTable.getColumnModel().getColumn(3).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(3).setPreferredWidth(7);
            paymentProcessTable.getColumnModel().getColumn(4).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(4).setPreferredWidth(2);
            paymentProcessTable.getColumnModel().getColumn(5).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(5).setPreferredWidth(10);
            paymentProcessTable.getColumnModel().getColumn(6).setResizable(false);
            paymentProcessTable.getColumnModel().getColumn(6).setPreferredWidth(4);
        }

        jPanel9.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 67, 1680, 888));

        assignJButton.setBackground(new java.awt.Color(0, 153, 0));
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        jPanel9.add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 32, -1, -1));

        processJButton.setBackground(new java.awt.Color(0, 153, 0));
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        jPanel9.add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 32, -1, -1));

        jLabel1.setBackground(new java.awt.Color(204, 153, 255));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(38, 114, 0));
        jLabel1.setText("Check Card Info");
        jPanel9.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 37, 167, -1));

        jLabel2.setBackground(new java.awt.Color(204, 153, 255));
        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(38, 114, 0));
        jLabel2.setText("Message");
        jPanel9.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(502, 37, -1, -1));
        jPanel9.add(messageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 32, 92, 30));

        add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = paymentProcessTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select order for processing");
            return;
        }

        String receiver = paymentProcessTable.getValueAt(selectedRow, 7) != null ? paymentProcessTable.getValueAt(selectedRow, 7).toString() : null;
        if (receiver == null) {
            WorkRequest request = (WorkRequest) paymentProcessTable.getValueAt(selectedRow, 0);
            request.setReceiver(userAccount);
            request.setStatus("Pending");
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Already assigned to a Payment Processor!");
        }

    }//GEN-LAST:event_assignJButtonActionPerformed
    public static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = paymentProcessTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }
        String receiver = paymentProcessTable.getValueAt(selectedRow, 7) != null ? paymentProcessTable.getValueAt(selectedRow, 7).toString() : null;

        if (receiver == null) {
            JOptionPane.showMessageDialog(null, "Please assign user before processing");
            return;
        }
        if (receiver != null || userAccount.getUsername().equals(receiver)) {
            String tempStatus="Payment Procesed / Inventory Check In-Progress";
            String completedStatus="Completed";
            OrderProcessWorkRequest request = (OrderProcessWorkRequest) paymentProcessTable.getValueAt(selectedRow, 0);
            if(request.getStatus().equals(tempStatus)|| request.getStatus().equals(completedStatus)){
                 JOptionPane.showMessageDialog(null, "Request already processed");
                 return;
            }
            request.setStatus("Processing");
            
            String creditCardNo = request.getOrder().getCreditCardNo();
            int cvv = request.getOrder().getCvv();
            if (isNumeric(creditCardNo)) {
                int creditcardNumberOfDigits = (int) (Math.log10(Long.parseLong(creditCardNo)) + 1);
                int cvvNumberOfDigits = (int) (Math.log10(cvv) + 1);
                if (creditcardNumberOfDigits == 6 && cvvNumberOfDigits == 3) {
                    String approved = "Card Approved";
                    messageLabel.setText(approved);
                    request.setPaymentProcessResult(approved);
                    request.setStatus(tempStatus);
                    populateTable();
                    CreateVendorWorkRequest(request);
                    return;
                }
            }
            String declined = "Card Declined";
            messageLabel.setText(declined);
            request.setPaymentProcessResult(declined);
            request.setStatus(completedStatus);
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Cannot process other Payment Processor Request!");
        }

    }//GEN-LAST:event_processJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel messageLabel;
    public static javax.swing.JTable paymentProcessTable;
    private javax.swing.JButton processJButton;
    // End of variables declaration//GEN-END:variables

    private void CreateVendorWorkRequest(OrderProcessWorkRequest paymentProcessWorkRequest) {
        Network currentNetwork=null;
                //business.getNetworkList().stream().filter(network -> network.getName().equals("Boston")).findAny().orElse(null);
        for(Network network:business.getNetworkList())
        {
           for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList())
           {
               for(Organization organization: enterprise.getOrganizationDirectory().getOrganizationList()){
                   for(UserAccount account: organization.getUserAccountDirectory().getUserAccountList())
                   {
                      if(account.getUsername().equals(userAccount.getUsername())) 
                      {
                          currentNetwork=network;
                          break;
                      }
                   }
               }
           }
        }
        Enterprise wholeSaleEnterprise = currentNetwork.getEnterpriseDirectory().getEnterpriseList().stream().filter(enterprise -> enterprise.getEnterpriseType().equals(Enterprise.EnterpriseType.Wholesale)).findAny().orElse(null);
        VendorProcessWorkRequest request = new VendorProcessWorkRequest();
        request.setOrder(paymentProcessWorkRequest.getOrder());
        request.setSender(userAccount);
        request.setStatus("Payment Procesed / Inventory Check In-Progress");
        request.setPaymentProcessWorkRequest(paymentProcessWorkRequest);
        Organization org = null;
        for (Organization organization : wholeSaleEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof VendorOrganization) {
                org = organization;
                for (UserAccount account : org.getUserAccountDirectory().getUserAccountList()) {
                    List<Item> vendorArrayListItems = paymentProcessWorkRequest.getOrder().getItemlist().stream().filter(item -> item.getProduct().getVendorName().equals(account.getEmployee().getName())).collect(Collectors.toList());
                    if (vendorArrayListItems.size() > 0) {
                        account.getEmployee().getVendorProcessWorkRequestMap().put(request, "Payment Procesed / Inventory Check In-Progress");
                    }
                }
                break;
            }

        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);

        }
        // paymentProcessWorkRequest.getSender().getWorkQueue().getWorkRequestList().add(request);
        //  paymentProcessWorkRequest.getSender().getWorkQueue().getWorkRequestList().remove(paymentProcessWorkRequest);
    }
}
