/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VendorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.Organization.VendorOrganization;
import Business.Product.Product;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DeleteProductWorkRequest;
import Business.WorkQueue.UpdateStockWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kesha
 */
public class ManageProducts extends javax.swing.JPanel {

    /**
     * Creates new form ManageProducts
     */
    JPanel userProcessContainer;
    HashMap<String, ArrayList<Product>> map;
    Enterprise enterprise;
    JPanel backGroundJPanel;
    VendorOrganization organization;
    UserAccount account;
    EcoSystem business;

    public ManageProducts(JPanel backGroundJPanel, JPanel userProcessContainer, UserAccount account, VendorOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.account = account;
        this.enterprise = enterprise;
        this.userProcessContainer = userProcessContainer;
        this.backGroundJPanel = backGroundJPanel;
        this.organization = organization;
        this.business = business;
        this.map = account.getEmployee().getProductsHashMap();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        stockUpdateModel = new javax.swing.JTextField();
        delEntryModel = new javax.swing.JTextField();
        delUpdateCat = new javax.swing.JComboBox<>();
        stockStatusCat = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        delEntry = new javax.swing.JButton();
        stockUpdateSetQty = new javax.swing.JTextField();
        updateStockButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        checkStockTable = new javax.swing.JTable();
        backbtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(250, 250, 250));
        setMinimumSize(new java.awt.Dimension(1680, 980));
        setPreferredSize(new java.awt.Dimension(1680, 980));

        jLabel11.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 0));
        jLabel11.setText("Add to Stock:");

        jLabel12.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("Delete Entry:");

        jLabel13.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("Enter model:");

        jLabel10.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 0));
        jLabel10.setText("Enter model:");

        stockUpdateModel.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        stockUpdateModel.setForeground(new java.awt.Color(0, 153, 0));
        stockUpdateModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockUpdateModelActionPerformed(evt);
            }
        });

        delEntryModel.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        delEntryModel.setForeground(new java.awt.Color(0, 153, 0));
        delEntryModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delEntryModelActionPerformed(evt);
            }
        });

        delUpdateCat.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        delUpdateCat.setForeground(new java.awt.Color(0, 153, 0));
        delUpdateCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electronics", "Mobiles", "Kids" }));

        stockStatusCat.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        stockStatusCat.setForeground(new java.awt.Color(0, 153, 0));
        stockStatusCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electronics", "Mobiles", "Kids" }));

        jLabel14.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 153, 0));
        jLabel14.setText("Set Quantity:");

        delEntry.setBackground(new java.awt.Color(255, 0, 0));
        delEntry.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        delEntry.setForeground(new java.awt.Color(255, 255, 255));
        delEntry.setText("Delete Entry");
        delEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delEntryActionPerformed(evt);
            }
        });

        stockUpdateSetQty.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        stockUpdateSetQty.setForeground(new java.awt.Color(0, 153, 0));
        stockUpdateSetQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockUpdateSetQtyActionPerformed(evt);
            }
        });

        updateStockButton.setBackground(new java.awt.Color(0, 153, 0));
        updateStockButton.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        updateStockButton.setForeground(new java.awt.Color(255, 255, 255));
        updateStockButton.setText("Update Stock");
        updateStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStockButtonActionPerformed(evt);
            }
        });

        checkStockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand Name", "Model", "Stock", "Category"
            }
        ));
        checkStockTable.setEnabled(false);
        checkStockTable.setRowHeight(20);
        jScrollPane3.setViewportView(checkStockTable);

        backbtn.setBackground(new java.awt.Color(0, 153, 0));
        backbtn.setForeground(new java.awt.Color(255, 255, 255));
        backbtn.setText("<<Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delEntryModel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(delUpdateCat, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(delEntry))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stockUpdateModel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(stockStatusCat, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stockUpdateSetQty, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addComponent(updateStockButton))
                    .addComponent(backbtn))
                .addContainerGap(571, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stockUpdateModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stockStatusCat, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stockUpdateSetQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateStockButton))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(delEntryModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delUpdateCat, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(delEntry)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 223, Short.MAX_VALUE)
                .addComponent(backbtn)
                .addGap(163, 163, 163))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void stockUpdateModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockUpdateModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockUpdateModelActionPerformed

    private void delEntryModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delEntryModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delEntryModelActionPerformed

    private void delEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delEntryActionPerformed
        // TODO add your handling code here:
        try {
            String del = delEntryModel.getText();
            String cat = delUpdateCat.getSelectedItem().toString();
// ArrayList<Product> productlist=map.get(cat);
//            for(Product product:productlist ){
//                if(product.getModel().equals(del))
//                {
//                  // productlist.remove(product);
//                }
//            }
            DeleteProductWorkRequest deleteProductWorkRequest = new DeleteProductWorkRequest();
            deleteProductWorkRequest.setCategory(cat);
         
            deleteProductWorkRequest.setModelName(del);
            if(deleteProductWorkRequest.getModelName().isEmpty()){
                JOptionPane.showMessageDialog(null, "Product model name cannot be empty!");
                return;
            }
            deleteProductWorkRequest.setSender(account);
            deleteProductWorkRequest.setStatus("Initiated");
            deleteProductWorkRequest.setRequestType("Delete Product");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InventoryOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(deleteProductWorkRequest);
                account.getWorkQueue().getWorkRequestList().add(deleteProductWorkRequest);
            }
            JOptionPane.showMessageDialog(null, "Product removal request sent to inventory");
            delEntryModel.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_delEntryActionPerformed

    private void stockUpdateSetQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockUpdateSetQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockUpdateSetQtyActionPerformed

    private void updateStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStockButtonActionPerformed
        // TODO add your handling code here:
        try {
            String model = stockUpdateModel.getText();
            boolean check = checkIfModelPresent(model);
            if (!check) {
                JOptionPane.showMessageDialog(null, "Model not found in store!");
                return;
            }
            int qty = Integer.parseInt(stockUpdateSetQty.getText());
            String cat = stockStatusCat.getSelectedItem().toString();
//            ArrayList<Product> productlist=map.get(cat);
//            for(Product product:productlist ){
//                if(product.getModel().equals(model))
//                {
//                   product.setStock(qty);
//                }
//            }
            UpdateStockWorkRequest updateStockWorkRequest = new UpdateStockWorkRequest();
            updateStockWorkRequest.setCategory(cat);
            updateStockWorkRequest.setRequestType("Update Stock");
            updateStockWorkRequest.setSender(account);
            updateStockWorkRequest.setModalName(model);
            updateStockWorkRequest.setQty(qty);
            updateStockWorkRequest.setStatus("Initiated");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InventoryOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(updateStockWorkRequest);
                account.getWorkQueue().getWorkRequestList().add(updateStockWorkRequest);
                JOptionPane.showMessageDialog(null, "Product stock update request sent to inventory");
            }

            stockUpdateModel.setText("");
            stockUpdateSetQty.setText("");

        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Product model cannot be empty");
        }

    }//GEN-LAST:event_updateStockButtonActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("VendorWorkArea", new VendorWorkAreaJPanel(backGroundJPanel, userProcessContainer, account, organization, enterprise, business));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_backbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbtn;
    private javax.swing.JTable checkStockTable;
    private javax.swing.JButton delEntry;
    private javax.swing.JTextField delEntryModel;
    private javax.swing.JComboBox<String> delUpdateCat;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> stockStatusCat;
    private javax.swing.JTextField stockUpdateModel;
    private javax.swing.JTextField stockUpdateSetQty;
    private javax.swing.JButton updateStockButton;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) checkStockTable.getModel();
        dtm.setRowCount(0);
        int i = 0;
        for (Map.Entry<String, ArrayList<Product>> entry : map.entrySet()) {

            for (Product product : entry.getValue()) {
                Object[] row = new Object[dtm.getColumnCount()];

                row[0] = product.getBrand_name();
                row[1] = product.getModel();
                row[2] = product.getStock();
                row[3] = product.getCategoryName();
                dtm.addRow(row);
            }
        }
    }

    private boolean checkIfModelPresent(String model) {
        boolean flag = false;
        for (Map.Entry<String, ArrayList<Product>> entry : map.entrySet()) {
            ArrayList<Product> value = entry.getValue();
            Product product = value.stream().filter(prdct -> prdct.getModel().equals(model)).findAny().orElse(null);
            if (product != null) {
                flag = true;
            }
        }
        if (flag) {
            return true;
        } else {
            return false;
        }
    }
}
