/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryRole;

import userinterface.VendorRole.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DeliveryOrganization;
import Business.Organization.InventoryOrganization;
import Business.Product.Product;
import Business.UserAccount.UserAccount;

import Business.WorkQueue.OrderProcessWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DeliveryOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    
    public DeliveryWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DeliveryOrganization organization, Enterprise enterprise,EcoSystem business ) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business=business;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();
    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            OrderProcessWorkRequest paymentProcessWorkRequest=(OrderProcessWorkRequest)request;
            Object[] row = new Object[6];
            row[0] = paymentProcessWorkRequest.getRequestID();
          
            row[1] = paymentProcessWorkRequest.getReceiver();
            row[2] = paymentProcessWorkRequest.getRequestDate();
            row[3] = paymentProcessWorkRequest.getSender();
            row[4]=paymentProcessWorkRequest.getOrder().getShippingAddress();

//            String result = request.getStatus();
//            row[3] = result == null ? "Waiting" : result;
            row[5] = request.getStatus();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        Assignbtn = new javax.swing.JButton();
        processbtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(250, 250, 250));
        setMinimumSize(new java.awt.Dimension(1680, 980));
        setPreferredSize(new java.awt.Dimension(1680, 980));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        refreshTestJButton.setBackground(new java.awt.Color(0, 153, 0));
        refreshTestJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 80, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(38, 114, 0));
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 27, 127, 30));

        valueLabel.setForeground(new java.awt.Color(0, 153, 0));
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 27, 158, 26));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Receiver", "Request Date", "Sender", "Delivery Address", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setSelectionBackground(new java.awt.Color(0, 153, 0));
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 860, 470));

        Assignbtn.setBackground(new java.awt.Color(0, 153, 0));
        Assignbtn.setForeground(new java.awt.Color(255, 255, 255));
        Assignbtn.setText("Assign to me");
        Assignbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignbtnActionPerformed(evt);
            }
        });
        add(Assignbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, -1, -1));

        processbtn.setBackground(new java.awt.Color(0, 153, 0));
        processbtn.setForeground(new java.awt.Color(255, 255, 255));
        processbtn.setText("Process");
        processbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processbtnActionPerformed(evt);
            }
        });
        add(processbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, 130, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();

    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void AssignbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignbtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }
        int ID = (int) workRequestJTable.getValueAt(selectedRow, 0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == ID) {
                if (request.getStatus().equals("Delivered")) {
                    JOptionPane.showMessageDialog(null, "The request is already completed");
                    break;
                } else {
                    if(request.getReceiver()!=null)
                    {
                        JOptionPane.showMessageDialog(null, "Only unassigned requests can be assigned to you");
                    break;
                    }
                    else
                    {
                    if (request.getSender().equals(userAccount)) {
                        JOptionPane.showMessageDialog(null, "Request sender and receiver cannot be same person!");
                    } else {
                        request.setReceiver(userAccount);
                       // request.setStatus("Pending");
                        populateRequestTable();
                        break;
                    }
                    }
                }
            }
        }
    }//GEN-LAST:event_AssignbtnActionPerformed

    private void processbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processbtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        int ID = (int) workRequestJTable.getValueAt(selectedRow, 0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == ID) {
                
                if (null == request.getReceiver() || (!request.getReceiver().equals(userAccount))) {
                    JOptionPane.showMessageDialog(null, "This request is not assigned to you");
                    break;
                } else {
                    if (request.getStatus().equals("Delivered")) {
                        JOptionPane.showMessageDialog(null, "This request is already completed");
                        break;
                    } else {
                        ProcessRequestJPanel processRequestJPanel = new ProcessRequestJPanel(userProcessContainer,userAccount,organization,enterprise,business,request);
                            userProcessContainer.add("processWorkRequestJPanel", processRequestJPanel);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                    }
                }
            }
        }

    }//GEN-LAST:event_processbtnActionPerformed

    private HashMap<String, ArrayList<Product>> ReadFromProductsExcel(String pathToCsv) throws FileNotFoundException, IOException {
        String[] categoryArray = {"Newly Added", "Electronics", "Mobiles", "Kids Corner"};
        String[] collections = {"products", "productCategory"};
        HashMap<String, ArrayList<Product>> productsListMap = new HashMap<String, ArrayList<Product>>();
        String row = "";
        BufferedReader csvReader = new BufferedReader(new FileReader(pathToCsv));
        int rowCount = 0;
        Product lastAddedProduct = null;
        while ((row = csvReader.readLine()) != null) {
            if (rowCount == 0) {
                rowCount++;
                continue;
            }
            String[] data = row.split(",");
            if (data.length == 1) {
                lastAddedProduct.getDescription().add(data[0]);
                continue;
            }
            if (data.length == 2) {
                lastAddedProduct.getDescription().add(data[0] + " " + data[1]);
                continue;
            }
            String category = data[6];
            // DBObject dbObject = getDocumentByProperty(categoryCol, "name", category);
            // String id = dbObject.get("_id").toString();
            Product product = new Product();
            product.setBrand_name(data[1]);
            //  product.setCategoryId(id);
            product.getDescription().add(data[7]);
            product.setImageFileName(data[5]);
            product.setModel(data[2]);
            product.setPrice(Integer.parseInt(data[3]));
            product.setStock(Integer.parseInt(data[4]));
            if (productsListMap.containsKey(category)) {
                ArrayList<Product> arrayList = productsListMap.get(category);
                arrayList.add(product);
                lastAddedProduct = product;
            } else {
                ArrayList<Product> arrayList = new ArrayList<Product>();
                arrayList.add(product);
                lastAddedProduct = product;
                productsListMap.put(category, arrayList);
            }
            rowCount++;
            // do something with the data
        }
        csvReader.close();
        return productsListMap;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Assignbtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processbtn;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
